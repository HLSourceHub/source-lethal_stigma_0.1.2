//-------------------------------------------------------------------------
//
// Lethal Stigma - CUSTOM HAMMER FGD
//
//-------------------------------------------------------------------------

@include "base.fgd"
@include "hl2mp.fgd"

@SolidClass base(Targetname, EnableDisable) = func_clip_team : "Only allows the specified team to pass through this area"
[
	filterteam(choices) : "Team Allowed to Pass" : 0 : "Only allows the specified team to pass through this area" =
	[
		-1 : "No Teams Can Pass"
		0 : "All Teams Can Pass"
		2 : "Combine"
		3 : "Rebels"
	]

	// Input of -1 = no teams can pass; 0 = all teams; 2 = Combine only; 3 = Rebels only
	input ChangeTeamAllowedToPass(void) : "Change the team allowed to pass through this area"
]

@PointClass base(Targetname, Angles) studio( "models/combine_turrets/floor_turret.mdl" ) = npc_turret_floor : "Floor Turret"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
		128 : "Fast Retire" : 0
		256 : "Out of Ammo" : 0
		//512 : "Citizen modified (Friendly)" : 0
	]
	
	teamNumber(choices) : "Default Team" : 0 : "Specifies the default allied team for this turret when it spawns." =
	[
		0 : "Neutral (no team)"
		2 : "Combine"
		3 : "Rebels"
	]
	
	// Inputs
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input Enable(void) : "Enable the turret."
	input Disable(void) : "Disable the turret."
	input DepleteAmmo(void) : "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void) : "Restores ammo to a turret, allowing it to fire live rounds again."
	input SelfDestruct(void) : "Causes the turret to warn and then explode."

	// Input of 2 = Combine; 3 = Rebels; anything else = neutral (no team)
	input ChangeTurretTeam(void) : "Changes the team this turret is affiliated with"

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
	output OnPhysGunPickup(void) : "Picked up with physgun"
	output OnPhysGunDrop(void) : "Released by physgun"
]

@BaseClass base(Targetname, Angles, EnableDisable) iconsprite("editor/npc_maker.vmt") color(0 0 255) = BaseNPCMaker
[
	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		// Only in npc__maker, npc_template_maker uses flag from template NPC
		16 : "Fade Corpse" : 1
		32 : "Infinite Children" : 0
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
	]

	rallypointName(string) : "Rally Point" : "" : "(OPTIONAL) Name of the info_ls_npc_rallypoint entity that NPCs should move to when they spawn."

	MaxNPCCount(integer) : "Num. of NPCs" : 10 : "Number of NPCs that will spawn before this spawner is exhausted."
	SpawnFrequency(string) : "Frequency" : "-1" : "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
	MaxLiveChildren(integer) : "Max Live NPCs" : 1 : "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
	NPCSquadname(string) : "Childrens' Squad Name" : ""

	// Outputs
	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC." 
	output OnAllSpawned(void) : "Fired when the spawned is exhausted (all children have been spawned)."
	output OnAllSpawnedDead(void) : "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."
	output OnAllLiveChildrenDead(void) : "Fired when all spawned children have died. This does not mean the spawned is exhausted, so a new child may be spawned any time after this (unless the maker is disabled)."

	// Inputs
	input Spawn(void) : "Spawns an NPC."
	input Toggle(void) : "Toggles the spawner enabled/disabled state."
	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input AddMaxChildren(integer) : "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still wont begin spawning until it is re-enabled with the Enable input."
	input SetMaxChildren(integer) : "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input."
	input SetMaxLiveChildren(integer) : "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_turret_spawner : 
	"Spawns floor turret NPCs."
[
	teamNumber(choices) : "Default Team" : 0 : "Specifies the default allied team of the turrets to be spawned." =
	[
		0 : "Neutral (no team)"
		2 : "Combine"
		3 : "Rebels"
	]

	NPCTargetname(string) : "Turrets' Name" : "spawnedturrets" : "Target name of the turrets to be spawned. Useful for tracking and counting spawned turrets."
	NPCSquadname(string) : "Turrets' Squad Name" : "turrets" : "Squad name of the turrets to be spawned. Helps spawned turrets track and predict enemies."
	NPCHintGroup(string) : "Turrets' Hint Group"
]

@PointClass base(Targetname, Angles, BaseFadeProp) studio("models/items/ammocrate_rockets.mdl") = item_ammo_crate : "Ammo Crate"
[
	ThisTeamOnly(choices) : "Team Allowed to Use" : 0 : "Specifies the team that is allowed to resupply at this crate. Note that under certain gamemodes that do not use teams (Free for All, Outbreak, etc), all players will be able to use this ammo crate regardless of the value of this property/setting." =
	[
		0 : "All Teams"
		2 : "Combine"
		3 : "Rebels"
	]

	GiveAllAmmo(choices) : "Fully Resupply Players" : 1 : "Resupply players with full ammo of all primary and secondary weapons, except ones that are easily spammed." =
	[
		0 : "No"
		1 : "Yes"
	]

	AmmoType(choices) : "Ammo Type" : 1 : "Supply players with this type of ammo (unless full resupply is enabled, in which case this isn't used at all and can be disregarded). WARNING: Some choices do not have corresponding models, thus a crate with one of these choices may appear as an ERROR in-game!" =
	[
		0 : "Pistol"
		1 : "SMG1"
		2 : "AR2"
		3 : "RPG Rounds"
		4 : "Buckshot"
		5 : "Grenades"
		6 : "357"
		7 : "XBowBolt"
		8 : "AR2 Alt-Fire Round"
		9 : "SMG Alt-Fire grenade"
	]

	// Inputs
	input Kill(void) : "Remove the ammo crate"
	output OnUsed(void) : "Fires when +used by the player."
]

@PointClass base(Targetname) iconsprite("editor/scripted_sentence.vmt") = info_ls_configuration : 
	"A simple point entity required of all Lethal Stigma maps that defines a whole bunch of information for LS servers, including which gamemodes are supported."
[
	SupportsTE(choices) : "Supports Team Elimination?" : 0 : "Does this map support the Team Elimination gamemode (must have an adequate number of info_player_rebel and info_player_combine spawn point entities)?" =
	[
		0 : "No"
		1 : "Yes"
	]

	SupportsFFA(choices) : "Supports Free for All?" : 0 : "Does this map support the Free for All gamemode (must have an adequate number of info_player_deathmatch spawn point entities)?" =
	[
		0 : "No"
		1 : "Yes"
	]

	SupportsCTF(choices) : "Supports Capture the Flag?" : 0 : "Does this map support the Capture the Flag gamemode (must have an adequate number of info_player_rebel and info_player_combine spawn point entities in addition to at least one info_ls_ctf_flagpoint point entity)?" =
	[
		0 : "No"
		1 : "Yes"
	]

	SupportsOUTBRK(choices) : "Supports Outbreak?" : 0 : "Does this map support the Outbreak gamemode (must have an adequate number of info_player_deathmatch spawn point entities and at least one ls_npc_zombie or ls_npc_headcrab point entity)?" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname) iconsprite("editor/bullseye.vmt") = info_ls_ctf_flagpoint : 
	"A simple point entity required of all Lethal Stigma maps that use the CTF gamemode. Defines a possible spawn point for the CTF flag entity."
[
]

@PointClass base(Targetname) iconsprite("editor/scripted_sentence.vmt") = logic_ls_gamemode :
	"A simple point entity that can be used to identify what type of gamemode is currently being played."
[
	// Inputs
	input CheckGamemode(void) : "Initiates a check which will output an event based upon the gamemode currently being played."

	// Outputs
	output OnGamemodeIsError(void) : "No gamemode was loaded due to improper map configuration."
	output OnGamemodeIsNotLoadedYet(void) : "No gamemode has been loaded yet."
	output OnGamemodeIsTeamElimination(void) : "The current gamemode has been identified as Team Elimination."
	output OnGamemodeIsFreeForAll(void) : "The current gamemode has been identified as Free for All."
	output OnGamemodeIsCaptureTheFlag(void) : "The current gamemode has been identified as Capture the Flag."
	output OnGamemodeIsOutbreak(void) : "The current gamemode has been identified as Outbreak."
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_outbreak_spawner : 
	"Spawns a specified class of zombie or headcrab NPC."
[
	NPCTypeRandom(choices) : "Randomize NPC Type?" : 0 : "If enabled, a random type of zombie or headcrab will spawn instead of the one you define for 'Spawned Zombie/Headcrab Type'" =
	[
		0 : "No"
		1 : "Yes"
	]

	NPCTypeRandomRestrictions(choices) : "Randomization Restrictions" : 0 : "Specifies a certain restriction to the spawner, forcing it to spawn only zombies, headcrabs, or both. Randomization must be enabled for any restrictions to work." =
	[
		0 : "Both Zombies and Headcrabs"
		1 : "Only Zombies"
		2 : "Only Headcrabs"
	]

	NPCType(choices) : "Spawned NPC Type" : "npc_zombie" : "Defines what type of zombie or headcrab NPC will be spawned by this spawner entity." =
	[
		"npc_zombie" : "Classic Zombie"
		"npc_poisonzombie" : "Poison Zombie"
		"npc_fastzombie" : "Fast Zombie"
		"npc_headcrab" : "Classic Headcrab"
		"npc_headcrab_fast" : "Fast Headcrab"
		"npc_headcrab_poison" : "Poison Headcrab"
	]
]

@PointClass base(Targetname) iconsprite("editor/bullseye.vmt") = info_ls_npc_rallypoint : 
	"An optional rally point for all NPC spawners that can be used to force NPCs to move towards this point entity's origin when they spawn."
[
]